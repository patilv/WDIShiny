{
    "contents" : "library(WDI)\nlibrary(rMaps)\nlibrary(dplyr)\nlibrary(countrycode)\nlibrary(RColorBrewer)\nlibrary(plyr)\nlibrary(rCharts)\n\ndf=WDI(country = \"all\", indicator = \"SH.DYN.MORT\",\n    start = 1970, end = 2013, extra = FALSE, cache = NULL)\ndata <- df %.% \n  na.omit() %.%\n  #Add iso3c format country code \n  mutate(iso3c=countrycode(iso2c, \"iso2c\", \"iso3c\")) %.% \n  group_by(iso3c) \n\n\ni1 <- ichoropleth(SH.DYN.MORT~iso3c, data, map=\"world\",labels=FALSE,pal=\"Reds\",animate='year', play=TRUE)\ni1$publish(\"infantdeathsall\",host=\"gist\")\n# http://bl.ocks.org/patilv/raw/410a1de459998f35599a/\n\n\n# Gender specific\n\ndfgender=WDI(country = \"all\", indicator = c(\"SH.DYN.MORT.FE\",\"SH.DYN.MORT.MA\"),\n       start = 1970, end = 2013, extra = FALSE, cache = NULL)\n\ndfgender$femaleslessmales=dfgender$SH.DYN.MORT.FE-dfgender$SH.DYN.MORT.MA\n\ndata <- dfgender %.% \n  na.omit() %.%\n  #Add iso3c format country code \n  mutate(iso3c=countrycode(iso2c, \"iso2c\", \"iso3c\")) %.% \n  group_by(iso3c) \n\n\ndatasub=data[data$femaleslessmales<=0,]\ndatasub1 = transform(datasub, \n                 fillKey = cut(\n                   datasub$femaleslessmales, \n                   quantile(datasub$femaleslessmales, seq(0, 1, 1/5)),\n                   ordered_result = TRUE\n                 )\n)\n\ndatasub2=data[data$femaleslessmales>0,]\ndatasub2 = transform(datasub2, \n                     fillKey = cut(\n                       datasub2$femaleslessmales, \n                       quantile(datasub2$femaleslessmales, seq(0, 1, 1/1)),\n                       ordered_result = TRUE\n                     )\n)\ndata=rbind(datasub1,datasub2)\n\nDatamaps = setRefClass('Datamaps', contains = 'rCharts', methods = list(\n  initialize = function(){\n    callSuper();\n    LIB <<- get_lib(system.file('libraries', 'datamaps', package = 'rMaps'))\n  },\n  getPayload = function(chartId){\n    params_ = params[!(names(params) %in% \"popup_template\")]\n    list(\n      chartParams = toJSON2(params_), \n      chartId = chartId, lib = basename(lib),\n      popup_template = params$popup_template\n    )\n  }  \n))\n\n\n\nichoroplethcustom <- function (x, data, pal = \"Blues\", ncuts = 6, animate = NULL, \n                               play = T, map = \"usa\", legend = TRUE, labels = TRUE, ...) \n{\n  d <- Datamaps$new()\n  fml = lattice::latticeParseFormula(x, data = data)\n  fillColors = brewer.pal(ncuts, pal)\n  d$set(scope = map, fills = as.list(setNames(fillColors, levels(data$fillKey))), \n        legend = legend, labels = labels, ...)\n  if (!is.null(animate)) {\n    range_ = summary(data[[animate]])\n    data = dlply(data, animate, function(x) {\n      y = toJSONArray2(x, json = F)\n      names(y) = lapply(y, \"[[\", fml$right.name)\n      return(y)\n    })\n    d$set(bodyattrs = \"ng-app ng-controller='rChartsCtrl'\")\n    d$addAssets(jshead = \"http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js\")\n    if (play == T) {\n      d$setTemplate(chartDiv = sprintf(\"\\n        <div class='container'>\\n         <button ng-click='animateMap()'>Play</button>\\n         <span ng-bind='year'></span>\\n         <div id='{{chartId}}' class='rChart datamaps'></div>\\n        </div>\\n        <script>\\n          function rChartsCtrl($scope, $timeout){\\n            $scope.year = %s;\\n              $scope.animateMap = function(){\\n              if ($scope.year > %s){\\n                return;\\n              }\\n              map{{chartId}}.updateChoropleth(chartParams.newData[$scope.year]);\\n              $scope.year += 1\\n              $timeout($scope.animateMap, 1000)\\n            }\\n          }\\n       </script>\", \n                                       range_[1], range_[6]))\n    }\n    else {\n      d$setTemplate(chartDiv = sprintf(\"\\n        <div class='container'>\\n          <input id='slider' type='range' min=%s max=%s ng-model='year' width=200>\\n          <span ng-bind='year'></span>\\n          <div id='{{chartId}}' class='rChart datamaps'></div>          \\n        </div>\\n        <script>\\n          function rChartsCtrl($scope){\\n            $scope.year = %s;\\n            $scope.$watch('year', function(newYear){\\n              map{{chartId}}.updateChoropleth(chartParams.newData[newYear]);\\n            })\\n          }\\n       </script>\", \n                                       range_[1], range_[6], range_[1]))\n    }\n    d$set(newData = data, data = data[[1]])\n  }\n  else {\n    d$set(data = dlply(data, fml$right.name))\n  }\n  return(d)\n}\n\n\ni2 <- ichoroplethcustom(femaleslessmales~iso3c, data, map=\"world\",labels=FALSE,pal=\"Paired\",animate='year', play=T)\ni2\ni2$publish(\"femaleslessmales\",host=\"gist\")\n\n#http://bl.ocks.org/patilv/raw/a0311c4a4d8719d487f9/\n\n",
    "created" : 1410974177620.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3390141381",
    "id" : "A2675167",
    "lastKnownWriteTime" : 1410981682,
    "path" : "C:/Users/patil.GONZAGA/Dropbox/Reverything/WDIShiny/mortalityrateunder5.R",
    "project_path" : "mortalityrateunder5.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}